/**
 * Codasip s.r.o.
 *
 * CONFIDENTIAL
 *
 * Copyright 2022 Codasip s.r.o.
 *
 * All Rights Reserved.
 *
 * NOTICE: All information contained in this file, is and shall remain the property of
 * Codasip s.r.o. and its suppliers, if any.
 *
 * The intellectual and technical concepts contained herein are confidential and proprietary to
 * Codasip s.r.o. and are protected by trade secret and copyright law.  In addition, elements of the
 * technical concepts may be patent pending.
 *
 * This file is part of the Codasip Studio product. No part of the Studio product, including this
 * file, may be use, copied, modified, or distributed except in accordance with the terms contained
 * in Codasip license agreement under which you obtained this file.
 *
 *  \file   ca_decoder.codal
 *  \author Codasip
 *  \date   09.02.2022
 *  \brief  cycle accurate model
 */

#include "ca_defines.hcodal"
#include "opcodes.hcodal"
#include "config.hcodal"
#include "common_enums.hcodal"


// -------------------------------------------------------------------------------------------------
// Decoder
// -------------------------------------------------------------------------------------------------

set dec = i_hw_halt,
          i_hw_alu,
          i_hw_alu_i,
          i_hw_upper_imm,
          i_hw_shift,
          i_hw_branch,
          i_hw_jalr,
          i_hw_jal,
          i_hw_loads,
          i_hw_store;

// -------------------------------------------------------------------------------------------------
// Halt instruction
// -------------------------------------------------------------------------------------------------

// This instruction has no operands.

element i_hw_halt
{
    use opc_halt as opc;

    assembly { opc };
    binary { opc };

    semantics
    {
        // Register file write enable
        s_id_regwrite = WE_FALSE;
        s_id_rfwtsel = WBMX_ALU;

        // ALU Operation
        s_id_aluop = ALU_NOP;

        // Operand MUXes
        s_id_alusrc1 = DONT_CARE;
        s_id_alusrc2 = DONT_CARE;
        s_id_immsel = IMM_NONE;

        // Branch control
        s_id_brnchop = BRANCH_FALSE;
        s_id_brnchsel = BRADD_ADDR;

        // Memop Control Logic
        s_id_memop = MEM_NOP;

        // HALT Command
        s_id_halt = HALT_HALT;
    };
};

// -------------------------------------------------------------------------------------------------
// Arithmetic instructions
// -------------------------------------------------------------------------------------------------

element i_hw_alu
{
    use opc_rtype_alu as opc;

    assembly { opc };
    binary { opc };

    semantics
    {
       // Register file write enable
        s_id_regwrite = WE_TRUE;
        s_id_rfwtsel = WBMX_ALU;

        // ALU Operation
        switch (opc)
        {
            case RTYPE_ADD:
                s_id_aluop = ALU_ADD;
                break;

            case RTYPE_SUB:
                s_id_aluop = ALU_SUB;
                break;

            case RTYPE_AND:
                s_id_aluop = ALU_AND;
                break;

            case RTYPE_OR:
                s_id_aluop = ALU_OR;
                break;

            case RTYPE_XOR:
                s_id_aluop = ALU_XOR;
                break;

            case RTYPE_SLL:
                s_id_aluop = ALU_SLL;
                break;

            case RTYPE_SRL:
                s_id_aluop = ALU_SRL;
                break;

            case RTYPE_SRA:
                s_id_aluop = ALU_SRA;
                break;

            case RTYPE_SLT:
                s_id_aluop = ALU_SLT;
                break;

            case RTYPE_SLTU:
                s_id_aluop = ALU_SLTU;
                break;

            default:
                codasip_fatal(ALU_ERROR, "Default case: %d\n", opc);
                break;
        }

        // Operand MUXes
        s_id_alusrc1 = ALU1_REG;
        s_id_alusrc2 = ALU2_REG;
        s_id_immsel = IMM_NONE;

        // Branch control
        s_id_brnchop = BRANCH_FALSE;
        s_id_brnchsel = BRADD_ADDR;

        // Memop Control Logic
        s_id_memop = MEM_NOP;

        // HALT Command
        s_id_halt = HALT_NOHALT;
    };
};



// -------------------------------------------------------------------------------------------------
// Immediate Arithmetic instructions
// -------------------------------------------------------------------------------------------------

element i_hw_alu_i
{
    use opc_itype_alu as opc;

    assembly { opc };
    binary { opc };

    semantics
    {
       // Register file write enable
        s_id_regwrite = WE_TRUE;
        s_id_rfwtsel = WBMX_ALU;

        // ALU Operation
        switch (opc)
        {
            case ITYPE_ADDI:
                s_id_aluop = ALU_ADD;
                break;

            case ITYPE_ANDI:
                s_id_aluop = ALU_AND;
                break;

            case ITYPE_ORI:
                s_id_aluop = ALU_OR;
                break;

            case ITYPE_XORI:
                s_id_aluop = ALU_XOR;
                break;

            case ITYPE_SLTI:
                s_id_aluop = ALU_SLT;
                break;

            case ITYPE_SLTIU:
                s_id_aluop = ALU_SLTU;
                break;

            default:
                codasip_fatal(ALU_ERROR, "Default case: %d\n", opc);
                break;
        }

        // Operand MUXes
        s_id_alusrc1 = ALU1_REG;
        s_id_alusrc2 = ALU2_IMM;
        s_id_immsel = IMM_ITYPE;

        // Branch control
        s_id_brnchop = BRANCH_FALSE;
        s_id_brnchsel = BRADD_ADDR;

        // Memop Control Logic
        s_id_memop = MEM_NOP;

        // HALT Command
        s_id_halt = HALT_NOHALT;
    };
};

// -------------------------------------------------------------------------------------------------
// Immediate Shift instructions
// -------------------------------------------------------------------------------------------------

element i_hw_shift
{
    use opc_itype_special as opc;

    assembly { opc };
    binary { opc };

    semantics
    {
        // Register file write enable
        s_id_regwrite = WE_TRUE;
        s_id_rfwtsel = WBMX_ALU;

        // ALU Operation
        switch (opc)
        {
            case IMM_SHIFT_SLLI:
                s_id_aluop = ALU_SLL;
                break;

            case IMM_SHIFT_SRLI:
                s_id_aluop = ALU_SRL;
                break;

            case IMM_SHIFT_SRAI:
                s_id_aluop = ALU_SRA;
                break;

            default:
                codasip_fatal(ALU_ERROR, "Default case: %d\n", opc);
                break;
        }

        // Operand MUXes
        s_id_alusrc1 = ALU1_REG;
        s_id_alusrc2 = ALU2_IMM;
        s_id_immsel = IMM_ITYPE;

        // Branch control
        s_id_brnchop = BRANCH_FALSE;
        s_id_brnchsel = BRADD_ADDR;

        // Memop Control Logic
        s_id_memop = MEM_NOP;

        // HALT Command
        s_id_halt = HALT_NOHALT;
    };
};

// -------------------------------------------------------------------------------------------------
// Upper Immediate Arithmetic instructions
// -------------------------------------------------------------------------------------------------

element i_hw_upper_imm
{
    use opc_utype_ops as opc;

    assembly { opc };
    binary { opc };

    semantics
    {
        // Register file write enable
        s_id_regwrite = WE_TRUE;
        s_id_rfwtsel = WBMX_ALU;

        // ALU Operation
        s_id_aluop = ALU_ADD;

        // Operand MUXes
        switch (opc)
        {
            case UTYPE_LUI:
                s_id_alusrc1 = ALU1_ZERO;
                break;

            case UTYPE_AUIPC:
                s_id_alusrc1 = ALU1_PC;
                break;

        }
        s_id_alusrc2 = ALU2_IMM;
        s_id_immsel = IMM_UTYPE;

        // Branch control
        s_id_brnchop = BRANCH_FALSE;
        s_id_brnchsel = BRADD_ADDR;

        // Memop Control Logic
        s_id_memop = MEM_NOP;


        // HALT Command
        s_id_halt = HALT_NOHALT;
    };
};

// -------------------------------------------------------------------------------------------------
// Conditional Branch instructions
// -------------------------------------------------------------------------------------------------

element i_hw_branch
{
    use opc_btype_branches as opc;

    assembly { opc };
    binary { opc };

    semantics
    {
        // Register file write enable
        s_id_regwrite = WE_FALSE;
        s_id_rfwtsel = WBMX_ALU;

        // ALU Operation and Branch Control
        switch (opc)
        {
            case BTYPE_BEQ:
                s_id_aluop = ALU_SUB;
                s_id_brnchop = BRANCH_COND_TRUE;
                break;

            case BTYPE_BNE:
                s_id_aluop = ALU_SUB;
                s_id_brnchop = BRANCH_COND_FALSE;
                break;

            case BTYPE_BLT:
                s_id_aluop = ALU_SLT;
                s_id_brnchop = BRANCH_COND_FALSE;
                break;

            case BTYPE_BGE:
                s_id_aluop = ALU_SLT;
                s_id_brnchop = BRANCH_COND_TRUE;
                break;

            case BTYPE_BLTU:
                s_id_aluop = ALU_SLTU;
                s_id_brnchop = BRANCH_COND_FALSE;
                break;

            case BTYPE_BGEU:
                s_id_brnchop = BRANCH_COND_TRUE;
                s_id_aluop = ALU_SLTU;
                break;

            default:
                s_id_brnchop = 0;
                s_id_aluop = 0;
                codasip_fatal(BRNCH_ERROR, "Default case: %d\n", opc);
                break;
        }

        // Operand MUXes
        s_id_alusrc1 = ALU1_REG;
        s_id_alusrc2 = ALU2_REG;
        s_id_immsel = IMM_BTYPE;

        // Branch select
        s_id_brnchsel = BRADD_ADDR;

        // Memop Control Logic
        s_id_memop = MEM_NOP;

        // HALT Command
        s_id_halt = HALT_NOHALT;
    };
};

// -------------------------------------------------------------------------------------------------
// JALR instruction
// -------------------------------------------------------------------------------------------------

element i_hw_jalr
{
     use opc_itype_jlreg as opc;

    assembly { opc };
    binary { opc };

    semantics
    {
        // Register file write enable
        s_id_regwrite = WE_TRUE;
        s_id_rfwtsel = WBMX_PC;

        // ALU Operation
        s_id_aluop = ALU_ADD;

        // Operand MUXes
        s_id_alusrc1 = ALU1_REG;
        s_id_alusrc2 = ALU2_IMM;
        s_id_immsel = IMM_ITYPE;

        // Branch control
        s_id_brnchop = BRANCH_TRUE;
        s_id_brnchsel = BRADD_ALU;

        // Memop Control Logic
        s_id_memop = MEM_NOP;

        // HALT Command
        s_id_halt = HALT_NOHALT;
    };
};

// -------------------------------------------------------------------------------------------------
// JAL instruction
// -------------------------------------------------------------------------------------------------

element i_hw_jal
{
    use opc_jtype_jlink as opc;

    assembly { opc };
    binary { opc };

    semantics
    {
        // Register file write enable
        s_id_regwrite = WE_TRUE;
        s_id_rfwtsel = WBMX_PC;

        // ALU Operation
        s_id_aluop = ALU_NOP;

        s_id_alusrc1 = ALU1_PC;
        s_id_alusrc2 = ALU2_IMM;
        s_id_immsel = IMM_JTYPE;

        // Branch control
        s_id_brnchop = BRANCH_TRUE;
        s_id_brnchsel = BRADD_ADDR;

        // Memop Control Logic
        s_id_memop = MEM_NOP;

        // HALT Command
        s_id_halt = HALT_NOHALT;
    };
};

// -------------------------------------------------------------------------------------------------
// LOAD INSTRUCTIONS
// -------------------------------------------------------------------------------------------------

element i_hw_loads
{
    use opc_itype_loads as opc;
    // what type of opc above?

    assembly { opc };
    binary { opc };

    semantics
    {

        // Operand MUXes
        switch (opc)
        {
            case ITYPE_LB:
                s_id_memop = MEM_LB;
                break;

            case ITYPE_LBU:
                s_id_memop = MEM_LBU;
                break;
            
            case ITYPE_LH:
                s_id_memop = MEM_LH;
                break;

            case ITYPE_LHU:
                s_id_memop = MEM_LHU;
                break;

            case ITYPE_LW:
                s_id_memop = MEM_LW;
                break;

            default:
                s_id_memop = 0;
                codasip_fatal(MEM_ERROR, "Fail in decoder loads: %d\n", opc);
                break;

        }

        // Register file write enable
        s_id_regwrite = WE_TRUE;
        s_id_rfwtsel = RFWT_MEM;

        // ALU Operation
        s_id_aluop = ALU_ADD;

        // Operand MUXes
        s_id_alusrc1 = ALU1_REG;
        s_id_alusrc2 = ALU2_IMM;
        s_id_immsel = IMM_ITYPE;

        // Branch control
        s_id_brnchop = BRANCH_FALSE;
        s_id_brnchsel = DONT_CARE;

        // HALT Command
        s_id_halt = HALT_NOHALT;
    };
};


// -------------------------------------------------------------------------------------------------
// LOAD INSTRUCTIONS
// -------------------------------------------------------------------------------------------------

element i_hw_store
{
    use opc_stype_store as opc;
    // what type of opc above?

    assembly { opc };
    binary { opc };

    semantics
    {

        // Operand MUXes
        switch (opc)
        {
            case STYPE_SB:
                s_id_memop = MEM_SB;
                break;

            case STYPE_SH:
                s_id_memop = MEM_SH;
                break;
            
            case STYPE_SW:
                s_id_memop = MEM_SW;
                break;
            default:
                s_id_memop = 0;
                codasip_fatal(MEM_ERROR, "Fail in decoder store: %d\n", opc);
                break;

        }

        // Register file write enable
        s_id_regwrite = WE_FALSE;
        s_id_rfwtsel = RFWT_MEM;

        // ALU Operation
        s_id_aluop = ALU_ADD;

        // Operand MUXes
        s_id_alusrc1 = ALU1_REG;
        s_id_alusrc2 = ALU2_IMM;
        s_id_immsel = IMM_STYPE;

        // Branch control
        s_id_brnchop = BRANCH_FALSE;
        s_id_brnchsel = DONT_CARE;

        // HALT Command
        s_id_halt = HALT_NOHALT;
    };
};