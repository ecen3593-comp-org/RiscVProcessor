/**
 * Codasip s.r.o.
 *
 * CONFIDENTIAL
 *
 * Copyright 2022 Codasip s.r.o.
 *
 * All Rights Reserved.
 *
 * NOTICE: All information contained in this file, is and shall remain the property of
 * Codasip s.r.o. and its suppliers, if any.
 *
 * The intellectual and technical concepts contained herein are confidential and proprietary to
 * Codasip s.r.o. and are protected by trade secret and copyright law.  In addition, elements of the
 * technical concepts may be patent pending.
 *
 * This file is part of the Codasip Studio product. No part of the Studio product, including this
 * file, may be use, copied, modified, or distributed except in accordance with the terms contained
 * in Codasip license agreement under which you obtained this file.
 *
 *  \file   ca_
 *  """""""""""""""""""""""""""""resources.codal
 *  \author Codasip
 *  \date   09.02.2022
 *  \brief  cycle accurate model
 */

#include "ca_defines.hcodal"
#include "config.hcodal"

#define BOOLEAN_BIT     1    // Boolean control bit of width 1-bit
#define TWO_BIT         2       // Two bit wide control signal


pipeline pipe
{
    IF, ID, EX, ME, WB
};

// -------------------------------------------------------------------------------------------------
// Fetch stage
// -------------------------------------------------------------------------------------------------
 signal bit[ADDR_W] s_if_nextpc;
signal bit[ADDR_W] s_if_pcin;

// -------------------------------------------------------------------------------------------------
// Decode stage
// -------------------------------------------------------------------------------------------------

// Program Counter
register bit[ADDR_W] r_id_pc                    { pipeline = pipe.ID; };
// Instruction
signal bit[INSTR_W] s_id_instr;

// Instruction Opcode
signal bit[OPC_W] s_id_opc;

// Decoder Outputs
// ALU Operation Control
signal bit[ALUOP_W] s_id_aluop;

// ALU Source Control
signal bit[ALUSRC1_W] s_id_alusrc1;
signal bit[ALUSRC2_W] s_id_alusrc2;

// Register File Write Control
signal bit[REGWT_W] s_id_regwrite;
signal bit[RFWT_W] s_id_rfwtsel;

// Branch control
signal bit[BRNCH_W] s_id_brnchop;
signal bit[BRADD_W] s_id_brnchsel;


// HALT Control
signal bit[HALT_W] s_id_halt;

// Immediate selection
signal bit[IMMED_W] s_id_immsel;

// Instruction Fields
signal bit[RF_XPR_W] s_id_rs1;
signal bit[RF_XPR_W] s_id_rs2;
signal bit[RF_XPR_W] s_id_rd;

// Immediate fields
signal bit[WORD_W] s_id_immed;
signal bit[WORD_W] s_id_immedi;
signal bit[WORD_W] s_id_immedb;
signal bit[WORD_W] s_id_immedu;
signal bit[WORD_W] s_id_immeds;
signal bit[WORD_W] s_id_immedj;

// Register File Data
signal bit[WORD_W] s_id_reg1;
signal bit[WORD_W] s_id_reg2;
signal bit[WORD_W] s_id_rf1;
signal bit[WORD_W] s_id_rf2;

// Forwarding Control
signal bit[RFF1_W] s_id_fwdA;
signal bit[RFF2_W] s_id_fwdB;

// PHASE 8

// Memory Control Logic
signal bit[MEMOP_W] s_id_memop;

// Load Hazard Control
signal bit[BOOLEAN_BIT] s_id_loadhaz;

// Phase 9
signal bit[1] s_id_jal_branch;

// -------------------------------------------------------------------------------------------------
// Execute stage
// -------------------------------------------------------------------------------------------------

// Pipelined Program Counter + Instruction
register bit[ADDR_W] r_ex_pc                    { pipeline = pipe.EX; };
register bit[INSTR_W] r_ex_instr                { pipeline = pipe.EX; };

// Decoder Outputs
// ALU Operation Control
register bit[ALUOP_W] r_ex_aluop                { pipeline = pipe.EX; };

// ALU Source Control
register bit[ALUSRC1_W] r_ex_alusrc1            { pipeline = pipe.EX; };
register bit[ALUSRC2_W] r_ex_alusrc2            { pipeline = pipe.EX; };

// Register File Write Control
register bit[REGWT_W] r_ex_regwrite             { pipeline = pipe.EX; };
register bit[RFWT_W] r_ex_rfwtsel               { pipeline = pipe.EX; };

// Branch control
register bit [BRNCH_W] r_ex_brnchop             { pipeline = pipe.EX; };
register bit [BRADD_W] r_ex_brnchsel            { pipeline = pipe.EX; };

// HALT Control
register bit[HALT_W] r_ex_halt                  { pipeline = pipe.EX; };

// Register File Write Address
register bit[RF_XPR_W] r_ex_rd                  { pipeline = pipe.EX; };
register bit[RF_XPR_W] r_ex_rs1                 { pipeline = pipe.EX; };
register bit[RF_XPR_W] r_ex_rs2                 { pipeline = pipe.EX; };

// Immediate Data
register bit[WORD_W] r_ex_immed                 { pipeline = pipe.EX; };

// Register File Data
register bit[WORD_W] r_ex_reg1                  { pipeline = pipe.EX; };
register bit[WORD_W] r_ex_reg2                  { pipeline = pipe.EX; };

// ALU Data
signal bit[WORD_W] s_ex_src1;
signal bit[WORD_W] s_ex_src2;
signal bit[WORD_W] s_ex_alu;
signal bit[1] s_ex_zero;
signal bit[WORD_W] s_ex_fwd1;
signal bit[WORD_W] s_ex_fwd2;

// Forwarding Control
signal bit[DHF1_W] s_ex_fwdA;
signal bit[DHF2_W] s_ex_fwdB;

// Branch Address
signal bit[ADDR_W] s_ex_bradd;
signal bit[ADDR_W] s_ex_brimm;

// PHASE 8

// Memop Pipeline Reg
register bit[MEMOP_W] r_ex_memop                 { pipeline = pipe.EX; };

// Memory Size Control
signal bit[2] s_ex_memsize;
// should this be uint32? ^

// Return from Encoded Data
signal bit[WORD_W] s_ex_encoded_data;

// PHASE 9
signal bit[1] s_ex_take_branch;


// -------------------------------------------------------------------------------------------------
// Memory stage
// -------------------------------------------------------------------------------------------------

// Pipelined Program Counter + Instruction
register bit[ADDR_W] r_me_pc                    { pipeline = pipe.ME; };
register bit[INSTR_W] r_me_instr                { pipeline = pipe.ME; };

// Register File Write Control
register bit[REGWT_W] r_me_regwrite             { pipeline = pipe.ME; };
register bit[RFWT_W] r_me_rfwtsel               { pipeline = pipe.ME; };

// Register File Write Address
register bit[RF_XPR_W] r_me_rd                  { pipeline = pipe.ME; };

// ALU Data
register bit[WORD_W] r_me_alu                   { pipeline = pipe.ME; };
register bit[1] r_me_zero                       { pipeline = pipe.ME; };

// Branch control
register bit [BRNCH_W] r_me_brnchop             { pipeline = pipe.ME; };
signal bit[BOOLEAN_BIT] s_me_pcsrc;

// Branch address
register bit [ADDR_W] r_me_bradd                { pipeline = pipe.ME; };

// PHASE 8

// Memop Pipeline Register
register bit[MEMOP_W] r_me_memop                 { pipeline = pipe.ME; };

// Memsize Pipeline Register
register bit[2] r_me_memsize                { pipeline = pipe.ME; };

// Encoded Data Pipeline Register
register bit[WORD_W] r_me_encoded_data           { pipeline = pipe.ME; };

// Return from decoded data
signal bit[WORD_W] s_me_decoded_data;

// Formatted Decode Data
signal bit[WORD_W] s_me_mem_result;


// -------------------------------------------------------------------------------------------------
// Writeback stage
// -------------------------------------------------------------------------------------------------

// Pipelined Program Counter + Instruction
register bit[ADDR_W] r_wb_pc                    { pipeline = pipe.WB; };
register bit[INSTR_W] r_wb_instr                { pipeline = pipe.WB; };

// Register File Write Control
register bit[REGWT_W] r_wb_regwrite             { pipeline = pipe.WB; };
register bit[RFWT_W] r_wb_rfwtsel               { pipeline = pipe.WB; };

// Register File Write Address
register bit[RF_XPR_W] r_wb_rd                  { pipeline = pipe.WB; };

// ALU Data
register bit[WORD_W] r_wb_alu                   { pipeline = pipe.WB; };

// PC value
signal bit[ADDR_W] s_wb_pc4;

// Register File Write Value
signal bit[WORD_W] s_wb_result;

// PHASE 8

// Mem Result Pipeline Register
register bit[WORD_W] r_wb_mem_result            { pipeline = pipe.WB; };

// -------------------------------------------------------------------------------------------------
// Pipeline control
// -------------------------------------------------------------------------------------------------

signal   bit[1] s_if_stall;
signal   bit[1] s_id_stall;
signal   bit[1] s_id_clear;
register bit[1] r_id_clear {default = true;};
signal   bit[1] s_ex_stall;
signal   bit[1] s_ex_clear;
signal   bit[1] s_me_stall;
signal   bit[1] s_me_clear;
signal   bit[1] s_wb_stall;
signal   bit[1] s_wb_clear;
//  PHASE 8
register bit[1] r_id_stall {default = false;};
// Preservation of Last Instruction
register bit[INSTR_W] r_id_instr_preserved;
// Preservation of Last PC
register bit[ADDR_W] r_id_pc_preserved;


// -------------------------------------------------------------------------------------------------
// SYSCALL support for simulation
// -------------------------------------------------------------------------------------------------
signal bit [BOOLEAN_BIT]            s_syscall_pending;
signal bit [BOOLEAN_BIT]            s_syscall_stall;
register bit [TWO_BIT]              r_syscall_delay         {default = 0;};
