/**
 * Codasip s.r.o.
 *
 * CONFIDENTIAL
 *
 * Copyright 2022 Codasip s.r.o.
 *
 * All Rights Reserved.
 *
 * NOTICE: All information contained in this file, is and shall remain the property of
 * Codasip s.r.o. and its suppliers, if any.
 *
 * The intellectual and technical concepts contained herein are confidential and proprietary to
 * Codasip s.r.o. and are protected by trade secret and copyright law.  In addition, elements of the
 * technical concepts may be patent pending.
 *
 * This file is part of the Codasip Studio product. No part of the Studio product, including this
 * file, may be use, copied, modified, or distributed except in accordance with the terms contained
 * in Codasip license agreement under which you obtained this file.
 *
 *  \file   ca_pipe1_if.codal
 *  \author Codasip
 *  \date   09.02.2022
 *  \brief  cycle accurate model
 */

// -------------------------------------------------------------------------------------------------
// Fetch stage
// -------------------------------------------------------------------------------------------------

#include "config.hcodal"
#include "ca_defines.hcodal"

event fe : pipeline(pipe.IF)
{
    use if_output;

    semantics
    {

        // -----------------------------------------------------------------------------------------
        // Instruction fetch request
        // -----------------------------------------------------------------------------------------
        uint2 status;
        uint4 cache_hprot;
         cache_hprot = 0;
     
        // s_if_nextpc = r_pc + INSTR_SIZE;

        if (s_me_pcsrc == true){
             s_if_pcin = r_me_bradd;
        }
        else {
            s_if_pcin = r_pc;
        }

        // Instruction request
        // cache_hprot = pma_hprot(s_if_nextpc[31 .. 2] :: (uint2)0, 0u);
        // if(!s_id_stall)
        if_code.transport(CP_PHS_ADDRESS, CP_AHB_NONSEQ, CP_AHB_READ, s_if_pcin[31 .. 2] :: (uint2) 0, CP_AHB_SIZE_32, cache_hprot, CP_AHB_UNLOCK);

        // -----------------------------------------------------------------------------------------
        // Pipeline control
        // -----------------------------------------------------------------------------------------
        s_if_nextpc = s_if_pcin + INSTR_SIZE;
        // Set all the clear signals.
        s_id_clear = 0; 
        s_ex_clear = s_me_pcsrc||s_id_loadhaz;
        s_wb_clear = 0;
        s_me_clear = s_me_pcsrc;
        
        // Update the registers
        if_output();
    };
};

event if_output : pipeline(pipe.IF)
{
    semantics
    {
        // PHASE 8
        if(s_id_stall==0){
            r_pc =  s_if_nextpc;
        }
        else{
            r_pc = s_if_pcin;
        }

        r_id_pc = s_if_pcin;
        r_id_clear = 0;

        // PHASE 8
        r_id_stall = s_id_stall;
    };
};

