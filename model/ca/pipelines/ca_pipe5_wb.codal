/**
 * Codasip s.r.o.
 *
 * CONFIDENTIAL
 *
 * Copyright 2022 Codasip s.r.o.
 *
 * All Rights Reserved.
 *
 * NOTICE: All information contained in this file, is and shall remain the property of
 * Codasip s.r.o. and its suppliers, if any.
 *
 * The intellectual and technical concepts contained herein are confidential and proprietary to
 * Codasip s.r.o. and are protected by trade secret and copyright law.  In addition, elements of the
 * technical concepts may be patent pending.
 *
 * This file is part of the Codasip Studio product. No part of the Studio product, including this
 * file, may be use, copied, modified, or distributed except in accordance with the terms contained
 * in Codasip license agreement under which you obtained this file.
 *
 *  \file   ca_pipe5_wb.codal
 *  \author Codasip
 *  \date   09.02.2022
 *  \brief  Write-back - cycle accurate model
 */

// -------------------------------------------------------------------------------------------------
// Write-Back Stage
// -------------------------------------------------------------------------------------------------
#include "debug.hcodal"
#include "ca_defines.hcodal"

event wb : pipeline(pipe.WB)
{
    semantics
    {
         // Create the return address
        s_wb_pc4 = r_wb_pc + 4;

       // -----------------------------------------------------------------------------------------
        // Register File write Multiplexor
        // -----------------------------------------------------------------------------------------

        switch (r_wb_rfwtsel)
        {
            case WBMX_ALU:
                s_wb_result = r_wb_alu;
                break;

            case WBMX_PC:
                s_wb_result = s_wb_pc4;
                break;

            case RFWT_MEM:
                s_wb_result = r_wb_mem_result;
                break;

            default:
                s_wb_result = 0;
                codasip_fatal(WBSEL_ERROR, "Default case: %d\n", r_wb_rfwtsel);
                break;
        }

        // Set local stall.
        s_wb_stall = 0;

        // -----------------------------------------------------------------------------------------
        // Result write
        // -----------------------------------------------------------------------------------------

        if (r_wb_regwrite && (r_wb_rd != 0))
        {
            rf_xpr.wrt0[r_wb_rd] = s_wb_result;
        }
    };
};