/**
 * Codasip s.r.o.
 *
 * CONFIDENTIAL
 *
 * Copyright 2022 Codasip s.r.o.
 *
 * All Rights Reserved.
 *
 * NOTICE: All information contained in this file, is and shall remain the property of
 * Codasip s.r.o. and its suppliers, if any.
 *
 * The intellectual and technical concepts contained herein are confidential and proprietary to
 * Codasip s.r.o. and are protected by trade secret and copyright law.  In addition, elements of the
 * technical concepts may be patent pending.
 *
 * This file is part of the Codasip Studio product. No part of the Studio product, including this
 * file, may be use, copied, modified, or distributed except in accordance with the terms contained
 * in Codasip license agreement under which you obtained this file.
 *
 *  \file   ca_pipe3_ex.codal
 *  \author Codasip
 *  \date   09.02.2022
 *  \brief  Execute stage - cycle accurate model
 */

#include "ca_defines.hcodal"
#include "debug.hcodal"

// -------------------------------------------------------------------------------------------------
// Execute Stage
// -------------------------------------------------------------------------------------------------
event ex : pipeline(pipe.EX)
{
    use ex_output;
    use ex_memory;

    semantics
    {
        // -----------------------------------------------------------------------------------------
        // Forwarding Multiplexor Controls
        // -----------------------------------------------------------------------------------------

        if ((r_me_rd == r_ex_rs1) && (r_me_rd != 0) && (r_me_regwrite == WE_TRUE)) s_ex_fwdA = DHF1_ME;
        else if ((r_wb_rd == r_ex_rs1) && (r_wb_rd != 0) && (r_wb_regwrite == WE_TRUE)) s_ex_fwdA = DHF1_WB;
        else s_ex_fwdA = DHF1_REG;

        if ((r_me_rd == r_ex_rs2) && (r_me_rd != 0) && (r_me_regwrite == WE_TRUE)) s_ex_fwdB = DHF2_ME;
        else if ((r_wb_rd == r_ex_rs2) && (r_wb_rd != 0) && (r_wb_regwrite == WE_TRUE)) s_ex_fwdB = DHF2_WB;
        else s_ex_fwdB = DHF2_REG;

        // -----------------------------------------------------------------------------------------
        // Source 1 Forwarding Multiplexor
        // -----------------------------------------------------------------------------------------

        switch (s_ex_fwdA)
        {
            case DHF1_REG:
                s_ex_fwd1 = r_ex_reg1;
                break;

            case DHF1_ME:
                s_ex_fwd1 = r_me_alu;
                break;

            case DHF1_WB:
                s_ex_fwd1 = s_wb_result;
                break;

            default:
                s_ex_fwd1 = 0;
                codasip_fatal(SRC2_ERROR, "Default case: %d\n", r_ex_alusrc2);
                break;
        }

        // -----------------------------------------------------------------------------------------
        // Source 2 Forwarding Multiplexor
        // -----------------------------------------------------------------------------------------

        switch (s_ex_fwdB)
        {
            case DHF2_REG:
                s_ex_fwd2 = r_ex_reg2;
                break;

            case DHF2_ME:
                s_ex_fwd2 = r_me_alu;
                break;

            case DHF2_WB:
                s_ex_fwd2 = s_wb_result;
                break;

            default:
                s_ex_fwd2 = 0;
                codasip_fatal(SRC2_ERROR, "Default case: %d\n", r_ex_alusrc2);
                break;
        }

        // -----------------------------------------------------------------------------------------
        // Source 1 Multiplexor
        // -----------------------------------------------------------------------------------------

        switch (r_ex_alusrc1)
        {
            case ALU1_REG:
                s_ex_src1 = s_ex_fwd1;
                break;

            case ALU1_ZERO:
                s_ex_src1 = 0;
                break;

            case ALU1_PC:
                s_ex_src1 = r_ex_pc;
                break;

            default:
                s_ex_src1 = 0;
                codasip_fatal(SRC2_ERROR, "Default case: %d\n", r_ex_alusrc2);
                break;
        }

        // -----------------------------------------------------------------------------------------
        // Source 2 Multiplexor
        // -----------------------------------------------------------------------------------------

        switch (r_ex_alusrc2)
        {
            case ALU2_REG:
                s_ex_src2 = s_ex_fwd2;
                break;

            case ALU2_IMM:
                s_ex_src2 = r_ex_immed;
                break;

            default:
                s_ex_src2 = 0;
                codasip_fatal(SRC2_ERROR, "Default case: %d\n", r_ex_alusrc2);
                break;
        }


        // -----------------------------------------------------------------------------------------
        // ALU
        // ----------------------------------------------------------------------------------------

        switch (r_ex_aluop)
        {
            // Nop
            case ALU_NOP:
                s_ex_alu = 0;
                break;

            // Arithmetic instructions
            case ALU_ADD:
                s_ex_alu = s_ex_src1 + s_ex_src2;
                break;

            case ALU_SUB:
                s_ex_alu = s_ex_src1 - s_ex_src2;
                break;

            case ALU_AND:
                s_ex_alu = s_ex_src1 & s_ex_src2;
                break;

            case ALU_OR:
                s_ex_alu = s_ex_src1 | s_ex_src2;
                break;

            case ALU_XOR:
                s_ex_alu = s_ex_src1 ^ s_ex_src2;
                break;

            // Shift instructions
            case ALU_SLL:
                s_ex_alu = s_ex_src1 << (int5)s_ex_src2;
                break;

            case ALU_SRL:
                s_ex_alu = s_ex_src1 >> (int5)s_ex_src2;
                break;

            case ALU_SRA:
                s_ex_alu = (int32)s_ex_src1 >> (int5)s_ex_src2;
                break;

            // Compare instructions
            case ALU_SLT:
                if ((int32)s_ex_src1 < (int32)s_ex_src2) s_ex_alu = 1;
                else s_ex_alu = 0;
                break;

            case ALU_SLTU:
                if (s_ex_src1 < s_ex_src2) s_ex_alu = 1;
                else s_ex_alu = 0;
                break;

            default:
                s_ex_alu = 0;
                codasip_fatal(ALU_ERROR, "Default case: %d\n", r_ex_aluop);
                break;
        }

        ex_memory();
        s_ex_stall = s_me_stall;

        // HALT instruction detection
        if (r_ex_halt == HALT_HALT)
        {
            codasip_break();
            codasip_info(INFO_GENERAL, "Halt");
            // codasip_store_exit_code(rf_xpr.[GPR_RETVAL] & 0xFF);
        }

        // Branch address creation
        s_ex_brimm = r_ex_pc + r_ex_immed;

        // -----------------------------------------------------------------------------------------
        // JALR Multiplexor
        // -----------------------------------------------------------------------------------------

        switch (r_ex_brnchsel)
        {
            case BRADD_ADDR:
                s_ex_bradd = s_ex_brimm;
                break;

            case BRADD_ALU:
                s_ex_bradd = s_ex_alu;
                break;

            default:
                s_ex_bradd = 0;
                codasip_fatal(BRNCH_ERROR, "Default case: %d\n", r_ex_brnchsel);
                break;
        }

        // Zero generation
        s_ex_zero = (s_ex_alu == 0);


        // Update the Registers
        ex_output();
        
    };
};

event ex_memory : pipeline(pipe.EX)
{
    semantics
    {
        uint1 op_rw; // read/write
        uint2 op_type; // non-sequential/burst/idle

        switch(r_ex_memop)
        {

        // LOADS
            case MEM_LB:
                op_rw = CP_AHB_READ;
                op_type = CP_AHB_NONSEQ;
                s_ex_memsize = CP_AHB_SIZE_8;
                break;
            case MEM_LBU:
                op_rw = CP_AHB_READ;
                op_type = CP_AHB_NONSEQ;
                s_ex_memsize = CP_AHB_SIZE_8;
                break;        
            case MEM_LH:
                op_rw = CP_AHB_READ;
                op_type = CP_AHB_NONSEQ;
                s_ex_memsize = CP_AHB_SIZE_16;
                break;
            case MEM_LHU:
                op_rw = CP_AHB_READ;
                op_type = CP_AHB_NONSEQ;
                s_ex_memsize = CP_AHB_SIZE_16;
                break;
            case MEM_LW:
                op_rw = CP_AHB_READ;
                op_type = CP_AHB_NONSEQ;
                s_ex_memsize = CP_AHB_SIZE_32;
                break;

        // STORES

            case MEM_SB:
                op_rw = CP_AHB_WRITE;
                op_type = CP_AHB_NONSEQ;
                s_ex_memsize = CP_AHB_SIZE_8;
                break;
            case MEM_SH:
                op_rw = CP_AHB_WRITE;
                op_type = CP_AHB_NONSEQ;
                s_ex_memsize = CP_AHB_SIZE_16;
                break;
            case MEM_SW:
                op_rw = CP_AHB_WRITE;
                op_type = CP_AHB_NONSEQ;
                s_ex_memsize = CP_AHB_SIZE_32;
                break;
            
        // OTHER

            case MEM_NOP:
                op_rw = DONT_CARE;
                op_type = CP_AHB_IDLE;
                s_ex_memsize = CP_AHB_SIZE_0;
                break;

            
            default:
                codasip_fatal(MEM_ERROR, "Fail in ex_memory: %d\n", r_ex_memop);
                break;

        }

        // Call to transport for ldst interface
        ldst.transport( CP_PHS_ADDRESS , op_type , op_rw , s_ex_alu , s_ex_memsize );
        s_ex_encoded_data = ldst.encode_data( s_ex_fwd2 , s_ex_alu , s_ex_memsize );


    };
};

event ex_output : pipeline(pipe.EX)
{
    semantics
    {
        r_me_pc = r_ex_pc;
        r_me_instr = r_ex_instr;

        r_me_regwrite = r_ex_regwrite;
        r_me_rd = r_ex_rd;
        r_me_alu = s_ex_alu;
        r_me_bradd = s_ex_bradd;
        r_me_zero = s_ex_zero;
        r_me_brnchop = r_ex_brnchop;
        r_me_rfwtsel = r_ex_rfwtsel;

        // PHASE 8
        r_me_memop = r_ex_memop;
        r_me_memsize = s_ex_memsize;
        r_me_encoded_data = s_ex_encoded_data;

    };
};