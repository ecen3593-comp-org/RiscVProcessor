/**
 * Codasip s.r.o.
 *
 * CONFIDENTIAL
 *
 * Copyright 2022 Codasip s.r.o.
 *
 * All Rights Reserved.
 *
 * NOTICE: All information contained in this file, is and shall remain the property of
 * Codasip s.r.o. and its suppliers, if any.
 *
 * The intellectual and technical concepts contained herein are confidential and proprietary to
 * Codasip s.r.o. and are protected by trade secret and copyright law.  In addition, elements of the
 * technical concepts may be patent pending.
 *
 * This file is part of the Codasip Studio product. No part of the Studio product, including this
 * file, may be use, copied, modified, or distributed except in accordance with the terms contained
 * in Codasip license agreement under which you obtained this file.
 *
 *  \file   ca_defines.hcodal
 *  \author Codasip
 *  \date   09.02.2022
 *  \brief  cycle accurate model
 */


#ifndef CA_DEFINES_HCODAL
#define CA_DEFINES_HCODAL

#include "config.hcodal"

// -------------------------------------------------------------------------------------------------
// Signal size
// -------------------------------------------------------------------------------------------------

#define ALUOP_W          bitsizeof(enum aluop)
#define ALUSRC1_W        bitsizeof(enum alusrc1)
#define ALUSRC2_W        bitsizeof(enum alusrc2)
#define HALT_W           bitsizeof(enum halt)
#define REGWT_W          bitsizeof(enum regwrite)
#define DHF1_W           bitsizeof(enum dhfwd1)
#define DHF2_W           bitsizeof(enum dhfwd2)
#define RFF1_W           bitsizeof(enum rffwd1)
#define RFF2_W           bitsizeof(enum rffwd2)
#define IMMED_W          bitsizeof(enum immed)
#define BRNCH_W          bitsizeof(enum brnchop)
#define BRADD_W          bitsizeof(enum bradd)
#define RFWT_W           bitsizeof(enum rfwt)

// -------------------------------------------------------------------------------------------------
// Enumerations
// -------------------------------------------------------------------------------------------------

// -------------------------------------------------------------------------------------------------
// IF stage
// -------------------------------------------------------------------------------------------------

// -------------------------------------------------------------------------------------------------
// ID stage
// -------------------------------------------------------------------------------------------------

// Source 1 RF forwarding mux
enum rffwd1
{
    RFF1_REG,
    RFF1_WB,
};

// Source 2 RF forwarding mux
enum rffwd2
{
    RFF2_REG,
    RFF2_WB,
};

// Immediate mux
enum immed
{
    IMM_NONE,
    IMM_ITYPE,
    IMM_BTYPE,
    IMM_UTYPE,
    IMM_STYPE,
    IMM_JTYPE,
};

// -------------------------------------------------------------------------------------------------
// EX stage
// -------------------------------------------------------------------------------------------------

// ALU function codes
enum aluop
{
    ALU_NOP,
    ALU_ADD,
    ALU_SUB,
    ALU_AND,
    ALU_OR,
    ALU_XOR,
    ALU_SLT,
    ALU_SLTU,
    ALU_SRL,
    ALU_SRA,
    ALU_SLL,
};

// ALU source 1 mux
enum alusrc1
{
    ALU1_REG,
    ALU1_ZERO,
    ALU1_PC,
};

// ALU source 2 mux
enum alusrc2
{
    ALU2_REG,
    ALU2_IMM,
};

// Source 1 DH forwarding mux
enum dhfwd1
{
    DHF1_REG,
    DHF1_ME,
    DHF1_WB,
};

// Source 2 DH forwarding mux
enum dhfwd2
{
    DHF2_REG,
    DHF2_ME,
    DHF2_WB,
};

// Branch Multiplexor
enum bradd
{
    BRADD_ADDR,
    BRADD_ALU,
};

// HALT Command
enum halt
{
    HALT_NOHALT,
    HALT_HALT,
};


// -------------------------------------------------------------------------------------------------
// ME stage
// ------------------------------------------------------------------------------------------------

// Branch Command
enum brnchop
{
    BRANCH_FALSE,
    BRANCH_TRUE,
    BRANCH_COND_FALSE,
    BRANCH_COND_TRUE,
};

// -------------------------------------------------------------------------------------------------
// WB stage
// -------------------------------------------------------------------------------------------------

// Register File Write
enum regwrite
{
    WE_FALSE,
    WE_TRUE,
};

// Register File Data Select

enum rfwt
{
    WBMX_ALU,
    WBMX_PC,
    WBMX_MEM,
};

// -------------------------------------------------------------------------------------------------
// Auxiliary definitions
// -------------------------------------------------------------------------------------------------
#define DONT_CARE           0
#define NOP_INSTRUCTION     ITYPE_ADDI
#define CP_AHB_SIZE_0   DONT_CARE

#endif // CA_DEFINES_HCODAL
